# -*- coding: utf-8 -*-
"""
Created on Wed Oct 25 16:26:00 2023

@author: Radhakrishna
"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Load your data (assuming it's in a variable called 'data')
data = pd.read_csv('C:\\programming\\python_programs\\Day8\\2.Data Analysis Tasks\\sample_data.csv')

# 1. Break down transactions by meter type
meter_type_breakdown = data['METRE_TYPE'].value_counts()

# Print information about the meter type breakdown
print("Meter Type Breakdown:")
print(meter_type_breakdown)

# 2. Perform exploratory data analysis
# Identify the meter type with the highest amount generated
meter_type_amount_sum = data.groupby('METRE_TYPE')['AMOUNT'].sum()
highest_amount_meter_type = meter_type_amount_sum.idxmax()
print(highest_amount_meter_type)

# Identify the most used meter type in each region
most_used_meter_type_by_region = data.groupby(['REGION', 'METRE_TYPE']).size().reset_index(name='count')
most_used_meter_type_by_region = most_used_meter_type_by_region.loc[most_used_meter_type_by_region.groupby('REGION')['count'].idxmax()]
print(most_used_meter_type_by_region)

# Identify the most used payment channel for each meter type
most_used_payment_channel_by_meter_type = data.groupby(['METRE_TYPE', 'PAYMENT_CHANNEL']).size().reset_index(name='count')
most_used_payment_channel_by_meter_type = most_used_payment_channel_by_meter_type.loc[most_used_payment_channel_by_meter_type.groupby('METRE_TYPE')['count'].idxmax()]
print(most_used_payment_channel_by_meter_type)


# Create DataFrames for each result
result_meter_type_highest_amount = pd.DataFrame({'Meter Type with Highest Amount': [highest_amount_meter_type]})
result_meter_type_by_region = most_used_meter_type_by_region.groupby('REGION')['METRE_TYPE'].first().reset_index(name='Most Used Meter Type by Region')
result_payment_channel_by_meter_type = most_used_payment_channel_by_meter_type.groupby('METRE_TYPE')['PAYMENT_CHANNEL'].first().reset_index(name='Most Used Payment Channel by Meter Type')

# Concatenate the DataFrames into the final table
exploratory_data_analysis = pd.concat([result_meter_type_highest_amount, result_meter_type_by_region, result_payment_channel_by_meter_type], axis=1)

# Display the results in a table
print("\nExploratory Data Analysis:")
print(exploratory_data_analysis)

# 3. Plot histogram plots for each scenario
fig, axes = plt.subplots(3, 1, figsize=(15, 15))

# Histogram for amount generated by each meter type
sns.histplot(x='AMOUNT', hue='METRE_TYPE', data=data, kde=True, ax=axes[0], palette='viridis')
axes[0].set_title('Histogram of Amount Generated by Each Meter Type')

# Histogram for the count of each meter type in each region
sns.countplot(x='REGION', hue='METRE_TYPE', data=data, ax=axes[1], palette='viridis')
axes[1].set_title('Histogram of Meter Type Counts in Each Region')

# Histogram for the count of each payment channel used by each meter type
sns.countplot(x='PAYMENT_CHANNEL', hue='METRE_TYPE', data=data, ax=axes[2], palette='viridis')
axes[2].set_title('Histogram of Payment Channel Counts for Each Meter Type')

plt.tight_layout()

# 4. Save the generated plots in the current working directory
fig.savefig('Meter Type Transactions Breakdown.png')